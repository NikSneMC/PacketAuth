plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
}

version = project.mod_version
group = project.group

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade project(path: ':common')
    implementation project(path: ":common")
    shade 'org.yaml:snakeyaml:2.0'
    compileOnly 'org.yaml:snakeyaml:2.0'
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "max_minecraft_version", project.max_minecraft_version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "max_minecraft_version": project.max_minecraft_version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}



jar {
    configurations.shade.each { dep ->
        duplicatesStrategy = DuplicatesStrategy.WARN
        from(project.zipTree(dep)) {
            exclude 'META-INF/MANIFEST.MF', 'module-info.class'
        }
    }
}

remapJar {
    archiveBaseName.set("PacketAuth")
    archiveClassifier.set("")
    archiveAppendix.set("FabricQuilt")
    archiveVersion.set(String.format("%s_%s-%s", version, project.minecraft_version, project.max_minecraft_version))
}